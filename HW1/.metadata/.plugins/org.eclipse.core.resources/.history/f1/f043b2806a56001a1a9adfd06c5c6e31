import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

/**
 * 
 */

/**
 * @author chrisr98
 *
 */
public class OrderAndChaos 
{

	private CreateBoard board = new CreateBoard();
	private List<List<positionTTT>>  allWinningLines = new ArrayList<>();
	private int boardSize = 6;
	private TokenID players = new TokenID(2);
	private int player1 = players.getPlayer(1);
	private int player2 = players.getPlayer(2);
	
	
	public OrderAndChaos() {
		// TODO Auto-generated constructor stub
		// Creates the board and initialize all possible winning lines
		
		
		//If Order And Chaos
		
		board.createTicTacToeBoard(boardSize); //Set board to OaOBoard


		allWinningLines = board.initializeWinningLines(boardSize);		
		
	}
	
	public int run()
	{
		
		//Sets up the info at the beginning
				System.out.println("Welcome to Order and Chaos!");
				System.out.println("Player 1 is \'X\' and Player 2 is \'O\'.");
				System.out.println("Inputs should be entered in \'0 1\' format, with a space in between the numbers.");
				
				//Ask who would like to go first
				System.out.println("Who would like to go first? Player 1 or Player 2?");
				System.out.println("Enter 1 or 2");
				
				
				System.out.println();
				int turn = player1;
				
				
				Scanner scan = new Scanner(System.in);

				//If user does not input Int, it stops everything
				try 
				{
					//Initialize who goes first based on user input
					int answer = scan.nextInt();
					boolean valid = false;

					while (!valid) {

						if(answer == 1)
						{
							System.out.println("Player 1 goes first \n");
							turn = player1;
							valid = true;
							break;
						} else if (answer == 2)
						{
							System.out.println("Player 2 goes first \n");
							turn = player2;
							valid = true;
							break;
						} else
						{
							System.out.println("Invalid input, go again: ");
							answer = scan.nextInt();					
						}
					}

				} catch (InputMismatchException e) {
					// TODO: handle exception
					return -100;
				}
				
				while (isEnded(board, boardSize) == 0) 
				{
					board.printBoardTicTacToe(board, boardSize);
					
							
					
					if (turn == 1) 
					{
						//Only accepts int not letters, will force user to go again otherwise
						try
						{
							System.out.println("Player X enter your move:");
							int i = scan.nextInt();
							int j = scan.nextInt();
							System.out.println("You entered: (" + i + "," + j + ")");
							positionTTT player1Move = new positionTTT(i, j, 1);
							playerMoves(player1Move, board);
							turn = player.getPlayer(2);
						} catch (InputMismatchException e) 
						{
							System.out.println("Cannot enter letters, go again: ");
							turn = player.getPlayer(1);
						}		
						
					} else if (turn == 2) 
					{	
						//Only accepts int not letters, will force user to go again otherwise
						try
						{
							System.out.println("Player O enter your move:");
							int i = scan.nextInt();
							int j = scan.nextInt();
							System.out.println("You entered: (" + i + "," + j + ")");
							positionTTT player2Move = new positionTTT(i, j, 2);
							playerMoves(player2Move, board);
							turn = player.getPlayer(1);
						} catch (InputMismatchException e) 
						{
							System.out.println("Cannot enter letters, go again: ");
							turn = player.getPlayer(2);
						}
						
						
					} else {
						System.out.println("Error");
						return -100;
					}
					scan.nextLine(); // clears the buffer
				}
				
				if (isEnded(board, boardSize) == 1)
				{
					printBoardTicTacToe(board, boardSize);
					System.out.println("The winner is Player 1!");
					return 1;
				} else if(isEnded(board, 3) == 2)
				{
					printBoardTicTacToe(board, boardSize);
					System.out.println("The winner is Player 2!");
					return 2;
				} else
				{
					printBoardTicTacToe(board, boardSize);
					System.out.println("Stalemate!! There is no winner");
					return 0;
				}
				
			}
		return -100;
	}
	
	
}
